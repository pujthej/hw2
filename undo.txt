Undo Functionality Design for ExpenseTracker

I. Model:
- A Stack is used to keep track of transactions that can be undone.
- `addTransaction` and `removeTransaction` methods push transactions to the undo stack.
- `undoLastTransaction` method pops the last transaction from the stack and updates the transactions list.

Example of changes to code: 

private Stack<Transaction> undoStack = new Stack<>();

public void addTransaction(Transaction t) {
    transactions.add(t);
    undoStack.push(t);
}

public void removeTransaction(Transaction t) {
    transactions.remove(t);
    undoStack.push(t);
}

public void undoLastTransaction() {
    if (!undoStack.isEmpty()) {
        Transaction t = undoStack.pop();
        if (transactions.contains(t)) {
            transactions.remove(t);
        } else {
            transactions.add(t);
        }
    }
}



II. View:
- An "Undo" button is added to the UI.
- Users can click the "Undo" button to trigger the undo action.

Example of changes to code:

private JButton undoButton = new JButton("Undo");

public ExpenseTrackerView() {
    //...
    buttonPanel.add(undoButton);
    //...
}

public JButton getUndoButton() {
    return undoButton;
}

III. Controller:
- A method named `undoTransaction` is added that communicates with the model to undo the last operation.
- The view's undo button's action listener triggers the `undoTransaction` method. 

Example of changes to code: 

public ExpenseTrackerController(ExpenseTrackerModel model, ExpenseTrackerView view) {
    this.model = model;
    this.view = view;
    // Set up view event handlers
    view.getUndoButton().addActionListener(e -> undoTransaction());
    //...
}

public void undoTransaction() {
    model.undoLastTransaction();
    refresh();
}

Benefits:
1. The undo functionality allows users to easily revert unintended actions.
2. The design is flexible and can be extended for multiple undo actions by maintaining more sophisticated command history.